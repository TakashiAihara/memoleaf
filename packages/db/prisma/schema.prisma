datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
    output   = "../dbml"
}

generator zod {
    provider                         = "zod-prisma-types"
    output                           = "../zod"
    useMultipleFiles                 = false // default: false
    createInputTypes                 = true // default: true
    createModelTypes                 = true // default: true
    addInputTypeValidation           = true // default: true
    addIncludeType                   = true // default: true
    addSelectType                    = true // default: true
    validateWhereUniqueInput         = false // default: false
    createOptionalDefaultValuesTypes = false // default: false
    createRelationValuesTypes        = false // default: false
    createPartialTypes               = false // default: false
    useDefaultValidators             = true // default: true
    coerceDate                       = true // default: true
    writeNullishInModelTypes         = false // default: false
}

model Diary {
    id      String @id @default(cuid())
    title   String
    content String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("diary")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    diaries       Diary[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
